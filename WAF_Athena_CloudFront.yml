AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Prefix:
    Type: String
  LogBucketName:
    Type: String
    AllowedPattern: "[A-Za-z-]+"
  WebBucketName:
    Type: String
    AllowedPattern: "[A-Za-z-]+"
  AthenaDB:
    Type: String
    AllowedPattern: "[A-Za-z_]+"
  AthenaTable:
    Type: String
    AllowedPattern: "[A-Za-z_]+"
    
    
Resources:

  AccessLogBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "aws-waf-logs-${Prefix}-${LogBucketName}"
      AccessControl: Private

  RuleGroup:
    Type: AWS::WAFv2::RuleGroup
    Properties:
      Capacity: 10
      Name: !Sub "${Prefix}-GeoRestrictionRuleGroup"
      Rules:
        - Action:
            Block: {}
          Name: !Sub "${Prefix}-GeoRestrictionRule"
          Priority: 0
          Statement:
            GeoMatchStatement:
              CountryCodes:
                - JP
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: !Sub "${Prefix}-GeoRestrictionRule"
            SampledRequestsEnabled: true
      Scope: CLOUDFRONT
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: !Sub "${Prefix}-GeoRestrictionRuleGroup"
        SampledRequestsEnabled: true

  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Allow: {}
      Name: !Sub "${Prefix}-WebACL"
      Rules:
        - Name: !Sub "${Prefix}-WebACL-GeoRestriction"
          OverrideAction:
            None: {}
          Priority: 0
          Statement:
            RuleGroupReferenceStatement:
              Arn: !GetAtt RuleGroup.Arn
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: !Sub "${Prefix}-WebACL-GeoRestriction"
            SampledRequestsEnabled: true
      Scope: CLOUDFRONT
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: !Ref Prefix
        SampledRequestsEnabled: true
  
  LoggingConfiguration:
    Type: AWS::WAFv2::LoggingConfiguration
    Properties:
      ResourceArn: !GetAtt WebACL.Arn
      LogDestinationConfigs:
      - !GetAtt AccessLogBucket.Arn

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Prefix}-${WebBucketName}"
      AccessControl: Private

  OAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref Prefix
        
  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          TargetOriginId: !Ref Bucket
          ViewerProtocolPolicy: allow-all
        DefaultRootObject: index.html
        Enabled: true
        Origins:
          - DomainName: !GetAtt Bucket.RegionalDomainName
            Id: !Ref Bucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OAI}"
        PriceClass: PriceClass_All
        WebACLId: !GetAtt WebACL.Arn
        
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
          Action:
            - s3:GetObject
          Effect: Allow
          Principal:
            AWS: !Sub
              - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OAI}"
              - OAI: !Ref OAI
          Resource: !Sub
              - "arn:aws:s3:::${BucketName}/*"
              - BucketName: !Ref Bucket

  Function:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os
          
          bucket_name = os.environ['BUCKET_NAME']
          
          object_name = 'index.html'
          object_body = """<html>
            <head></head>
            <body>
              <h1>index.html</h1>
              <p>{bucket_name}</p>
            </body>
          </html>""".format(bucket_name=bucket_name)
          content_type = 'text/html'
          char_code= 'utf-8'
          
          s3_client = boto3.client('s3')
           
          CREATE = 'Create'
          DELETE = 'Delete'
          response_data = {}
          
          def lambda_handler(event, context):
            try:
              if event['RequestType'] == CREATE:
                put_response = s3_client.put_object(
                  Bucket=bucket_name,
                  Key=object_name,
                  Body=object_body.encode(char_code),
                  ContentEncoding=char_code,
                  ContentType=content_type)
                print(put_response)
              
              elif event['RequestType'] == DELETE:
                list_response = s3_client.list_objects_v2(
                  Bucket=bucket_name)
                for obj in list_response['Contents']:
                  delete_response = s3_client.delete_object(
                    Bucket=bucket_name,
                    Key=obj['Key'])
                  print(delete_response)
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
      Environment:
        Variables:
          BUCKET_NAME: !Ref Bucket
      FunctionName: !Sub "${Prefix}-function"
      Handler: index.lambda_handler
      Runtime: python3.8
      Role: !GetAtt FunctionRole.Arn

  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "${Prefix}-S3Access"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::${Prefix}-${WebBucketName}"
                  - !Sub "arn:aws:s3:::${Prefix}-${WebBucketName}/*"


  CustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt Function.Arn

  GlueDatabase:
      Type: AWS::Glue::Database
      Properties:
        CatalogId: !Ref AWS::AccountId
        DatabaseInput:
          Name: !Ref AthenaDB

  TransactionsTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref GlueDatabase
      TableInput:
        Name: !Ref AthenaTable
        Parameters:
          projection.enabled: true
          projection.region.type: enum
          projection.date.type: date
          projection.date.range: '2021/01/01,NOW'
          projection.date.format: 'yyyy/MM/dd'
          projection.date.interval: 1
          projection.date.interval.unit: DAYS
          storage.location.template: !Sub
              - 's3://aws-waf-logs-${Prefix}-${LogBucketName}/AWSLogs/${AccountID}/WAFLogs/cloudfront/${Prefix}-WebACL/${!date}/'
              - AccountID: !Ref AWS::AccountId
        PartitionKeys:
          - Name: date
            Type: string
        StorageDescriptor:
          Location: !Sub 
            - 's3://aws-waf-logs-${Prefix}-${LogBucketName}/AWSLogs/${AccountID}/WAFLogs/cloudfront/${Prefix}-WebACL/'
            - AccountID: !Ref AWS::AccountId
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          SerdeInfo:
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          Columns:
            - Name: timestamp
              Type: bigint
            - Name: formatversion
              Type: int
            - Name: webaclid
              Type: string
            - Name: terminatingruleid
              Type: string
            - Name: terminatingruletype
              Type: string
            - Name: action
              Type: string
            - Name: terminatingrulematchdetails
              Type: 'array<struct<conditiontype:string,sensitivitylevel:string,location:string,matcheddata:array<string>>>'
            - Name: httpsourcename
              Type: string
            - Name: httpsourceid
              Type: string
            - Name: rulegrouplist
              Type: 'array<struct<rulegroupid:string,terminatingrule:struct<ruleid:string,action:string,rulematchdetails:array<struct<conditiontype:string,sensitivitylevel:string,location:string,matcheddata:array<string>>>>,nonterminatingmatchingrules:array<struct<ruleid:string,action:string,overriddenaction:string,rulematchdetails:array<struct<conditiontype:string,sensitivitylevel:string,location:string,matcheddata:array<string>>>>>,excludedrules:string>>'
            - Name: ratebasedrulelist
              Type: 'array<struct<ratebasedruleid:string,limitkey:string,maxrateallowed:int>>'
            - Name: nonterminatingmatchingrules
              Type: 'array<struct<ruleid:string,action:string,rulematchdetails:array<struct<conditiontype:string,sensitivitylevel:string,location:string,matcheddata:array<string>>>,captcharesponse:struct<responsecode:string,solvetimestamp:string>>>'
            - Name: requestheadersinserted
              Type: 'array<struct<name:string,value:string>>'
            - Name: responsecodesent
              Type: string
            - Name: httprequest
              Type: 'struct<clientip:string,country:string,headers:array<struct<name:string,value:string>>,uri:string,args:string,httpversion:string,httpmethod:string,requestid:string>'
            - Name: labels
              Type: 'array<struct<name:string>>'
            - Name: captcharesponse
              Type: 'struct<responsecode:string,solvetimestamp:string,failureReason:string>'

Outputs:
  CloudFrontURL:
    Value: !GetAtt Distribution.DomainName
